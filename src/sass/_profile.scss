@import 'mixins';
@import 'variables';

.profile {
	background-color: var(--surface);
	max-width: 25ch;
	box-shadow: var(--shadow-2);
	border-radius: var(--radius-3);
	display: flex;
	flex-direction: column;

	.name {
		font-family: 'Nexa', sans-serif;
		font-weight: var(--font-weight-9);
		font-size: var(--font-size-4);
		text-align: center;
		margin-top: var(--size-4);
		padding-inline: var(--size-2);
	}

	.pronouns {
		display: block;
		font-family: 'Nexa', sans-serif;
		font-size: var(--font-size-1);
		font-style: italic;
		text-align: center;
		margin-top: var(--size-00);
	}

	.profile-avatar {
		@include border-gradient(linear-gradient(to right, #ee4433, #eed043), 3px);
		border-radius: var(--radius-round);
		width: 70%;
		margin-inline: auto;
		margin-block-start: calc(-1 * var(--size-3));
		box-shadow: var(--shadow-3);

		@include dark-theme {
			filter: brightness(0.95);
		}
	}

	dl {
		padding: var(--size-2) var(--size-3);
		& > div {
			display: flex;
			// align-items: center;
			gap: var(--size-2);
			padding-block: calc(var(--size-1) / 2);

			a {
				display: inline-block;
				
				@media screen and (min-width: $stream-breakpoint) {
					overflow: hidden;
					text-overflow: ellipsis;

					// Roughly how much of the card the link can take up before it overflow
					max-width: 15.5ch;

					// Because the above is a percent, shorter strings truncate earlier.
					// Setting a min of 15ch enforces a lower bound before truncation can happen.
					// That min width makes focus outlines funky, though.
					// So the actual min width is 100%, to ensure the element is only as wide as it needs to be.
					// This thing is a paradoxical nightmare, but it works. /shrug
					// min-width: min(15ch, 100%);
				}
			}
		}
	}

	& svg {
		width: 1.2rem;
		display: inline;
		margin-bottom: -0.3rem;

		path,
		circle {
			fill: currentColor;
		}
	}

	@include dark-theme {
		a {
			text-decoration-color: $purple-8;
		}
	}

	@media screen and (max-width: $stream-breakpoint) {
		max-width: fit-content;
		& .profile-avatar {
			width: var(--size-10);
		}

		& .name {
			min-width: max-content;
			margin-inline: var(--size-5);
		}
	}
}